services:
  db:
    restart: always
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: forcasthub
      MYSQL_USER: ohgiraffers
      MYSQL_PASSWORD: ohgiraffers
      MYSQL_SSL_CA: ""
      MYSQL_SSL_CERT: ""
      MYSQL_SSL_KEY: ""
      TZ: "Asia/Seoul"
    ports:
      - "9876:3306"
    volumes:
      - ./mysql_data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/my.cnf
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # SQL 스크립트 마운트
    profiles: ["database", "required"]

  redis:
    restart: always
    image: "redis:latest"
    container_name: "my-redis"
    ports:
      - "6379:6379"
    profiles: ["cache", "required"]
#      - cache

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./cert:/etc/prometheus/cert
      - ./prometheus-data:/prometheus
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    profiles:
      - monitoring

  rainloop:
    container_name: rainloop
    image: hardware/rainloop:latest
    ports:
      - "8020:8888"
    volumes:
      - ./email-server-config/data:/rainloop/data
    profiles:
      - email

  mailserver:
    image: docker.io/mailserver/docker-mailserver:latest
    hostname: email.master-of-prediction.shop
    container_name: mailserver
    env_file:
      - ./email-server-config/mailserver.env
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - maildata:/var/mail
      - mailstate:/var/mail-state
      - maillogs:/var/log/mail
      - /etc/localtime:/etc/localtime:ro
      - ./email-server-config/setup.sh:/usr/local/bin/setup.sh
      - ./email-server-config/config/:/tmp/docker-mailserver/${SELINUX_LABEL}
      - ./email-server-config/custom-certs:/tmp/dms/custom-certs/
    restart: always
    stop_grace_period: 1m
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    profiles:
      - email

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: MY-USER
      MINIO_ROOT_PASSWORD: MY-PASSWORD
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    profiles: ["storage", "required"]
#      - storage

  master:
    image: locustio/locust
    command: ["-f", "/mnt/locustfile.py", "--master"]
    ports:
      - "8089:8089"
    volumes:
      - ./locustfile.py:/mnt/locustfile.py
    environment:
      - LOCUST_MODE=master
    profiles:
      - testing

  worker:
    image: locustio/locust
    command: ["-f", "/mnt/locustfile.py", "--worker", "--master-host", "master"]
    volumes:
      - ./locustfile.py:/mnt/locustfile.py
    depends_on:
      - master
    environment:
      - LOCUST_MODE=worker
    profiles:
      - testing

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_CLIENT_PORT: 2181
#    volumes:
#      - zookeeper_data:/bitnami/zookeeper
    profiles: ["kafka", "required"]
  debezium:
    container_name: debezium
    image: debezium/connect:latest
    ports:
      - 8083:8083
    depends_on:
      - zookeeper
      - kafka
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:9092
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      CONNECT_REST_ADVERTISED_PORT: 8083
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

    profiles: ["kafka", "required"]

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "my_connect_configs:1:3:compact,my_connect_offsets:1:3:compact,my_connect_statuses:1:3:compact,schemahistory.inventory:1:3:compact"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'

#    volumes:
#      - kafka-data:/bitnami/kafka/data

    #      KAFKA_JMX_PORT: 9101
#      KAFKA_JMX_HOSTNAME: kafka
    profiles: ["kafka", "required"]

  mysql:
    image: quay.io/debezium/example-mysql:2.7
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: debezium
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: mysqlpw

    container_name: mysql
    profiles: ["db", "required"]


  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: cluster-kafka-ui
    restart: always
    ports:
      - "9998:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: PLAINTEXT://kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: "zookeeper:2181"
    depends_on:
      - zookeeper
      - kafka
    profiles: ["kafka", "required"]

  mongodb:
    image: mongo:7.0.14
    environment:
      MONGO_INITDB_ROOT_USERNAME: ohgiraffers
      MONGO_INITDB_ROOT_PASSWORD: ohgiraffers
      MONGO_INITDB_DATABASE: forecasthub
    ports:
      - "10001:27017"
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js

    command: mongod --auth
    profiles: ["mongo", "required"]


volumes:
  grafana-storage:
  maildata:
  mailstate:
  maillogs:
  minio-data:
  mc-config:
  mongo_data:
  zookeeper_data:
    driver: local
  kafka-data:
    driver: local